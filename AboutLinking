关于链接 


首先链接应该分为两个步骤 
第一是 符号解析 
这里的符号包括强符号和弱符号  强弱性是对于全局变量来说的
    强变量指的是初始化的全局变量以及函数体 而未初始化的全局变量以及函数原型是弱类型

这些变量都被放在符号表中 
    符号表中的信息还包括 这个变量的type 在哪个程序头 以及在头中的偏移等 
    而在哪个程序头字段还有三个别的值 包括这个符号是否是UNDEF ABS 以及 COMMON 
    UNDEF说明该变量未在本程序中定义 ABS说明不需要被重定义 COMMON说明未初始化（与bss段的区别是 COMMON不含初始化为0的数据）

先看符号的分别 有全局变量 外部变量和局部变量来说的 
    全局变量指的是本地全局变量并且可以被别的模块引用的
    外部变量指的是extern过来的变量 
    局部变量指的是static修饰的本地变量
    因此全局和外部变量是相对来说的

而多处定义弱变量也就引申出了奇怪的问题 

两个文件中的代码 
1. 
#include <stdio.h>

int y = 100;
int z;

void p1(void);

int main()
{
    z = 1000;
    p1();
    printf("y = %d z = %d", y, z);  
    return 0;
}

2.
#include <stdio.h>

int y;
int z;

void p1()
{
    y = 200;
    z = 2000;
}

此时运行结果打印的y值是！200 
因为弱定义和强定义同时存在时 肯定会选择强定义 那么 最后链接的时候 p1中y 和z 的位置 
就被替换成了文件1中y z的位置 也就是指向那里 从而修改了值


然后是符号解析的过程 栗子见./test/linkTest
在这个栗子中 我们最后使用了gcc -static -o main main.o ./myLib.a 来链接
符号解析的时候有三个集合 
    E excute(可重定位文件集合) 
    U undefine（未定义符号集合） 
    D define （已定义符号集合）
然后先是 main.o 文件 首先main.o加入到E中 然后main中有main函数 那么main加入到D中 
然后在main.o的elf文件的.systab即符号表中 myFunc1的符号的ndx字段值为UDF 说明是未定义的
所以加入到U中 然后继续下一个 myLib.a 这里面有myProc1.o 和myProc2.o 两个可重定位文件
然后分别与U中的符号比对 发现myProc1.o中有myFunc1符号 那么myProc1.o加入E myFunc1从U转移到D
然后printf符号也是一样 从默认的libc库中比对并加入到D中  
结束以后 如果U仍为非空集 那么链接失败  

成功以后  我们的E集合需要在下一步重定位的合并中用到 
而D集合需要在下一步确定符号的虚拟空间地址的时候用到


{
    这里是关于ELF文件头的部分知识 

    首先是可重定位ELF文件 
    这个文件首先前面会有一个ELF文件头 在这个ELF文件头中 会有指向一个section header的offset
    此外包含了很多很多信息 包括 魔数 运行的机器类型 
//栗子（加粗）
ELF 头：
  Magic：   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  类别:                              ELF64
  数据:                              2 补码，小端序 (little endian)
  版本:                              1 (current)
  OS/ABI:                            UNIX - System V
  ABI 版本:                          0
  类型:                              REL (可重定位文件)
  系统架构:                          Advanced Micro Devices X86-64
  版本:                              0x1
  入口点地址：               0x0
  程序头起点：          0 (bytes into file)
  Start of section headers:          5304 (bytes into file)
  标志：             0x0
  本头的大小：       64 (字节)
  程序头大小：       0 (字节)
  Number of program headers:         0
  节头大小：         64 (字节)
  节头数量：         13
  字符串表索引节头： 12

    因为是可重定位文件 所以程序入口位置为0 无程序头 所以大小以及Number of program header都是0
    但是是有节头表和节头数量啥的

    节头表中指向了本可重定位文件中所有的节的信息 通过这个可以访问到所有的节
//栗子（加粗）
节头：
  [号] 名称              类型             地址              偏移量
       大小              全体大小          旗标   链接   信息   对齐
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       0000000000000737  0000000000000000  AX       0     0     1
  [ 2] .rela.text        RELA             0000000000000000  00000dc0
       0000000000000648  0000000000000018   I      10     1     8
  [ 3] .data             PROGBITS         0000000000000000  00000777
       0000000000000000  0000000000000000  WA       0     0     1
  [ 4] .bss              NOBITS           0000000000000000  00000777
       0000000000000000  0000000000000000  WA       0     0     1
  [ 5] .rodata           PROGBITS         0000000000000000  00000778
       00000000000000ec  0000000000000000   A       0     0     8
  [ 6] .comment          PROGBITS         0000000000000000  00000864
       0000000000000025  0000000000000001  MS       0     0     1
  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  00000889
       0000000000000000  0000000000000000           0     0     1
  [ 8] .eh_frame         PROGBITS         0000000000000000  00000890
       0000000000000078  0000000000000000   A       0     0     8
  [ 9] .rela.eh_frame    RELA             0000000000000000  00001408
       0000000000000048  0000000000000018   I      10     8     8
  [10] .symtab           SYMTAB           0000000000000000  00000908
       0000000000000390  0000000000000018          11    11     8
  [11] .strtab           STRTAB           0000000000000000  00000c98
       0000000000000127  0000000000000000           0     0     1
  [12] .shstrtab         STRTAB           0000000000000000  00001450
       0000000000000061  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)

我们可以看到 旗标啥的 A指的是Alloc 分配空间 也就是需要加载到内存中  代码段 数据段balabala

这就可以访问到所有的节了

接下来是可执行文件 可执行文件和可重定位长得还是很像的 但是 因为不需要重定位 所以
可执行文件中的两个rel节消失了 包括rel.data & rel.text
此外在elf头之后 新增加了程序头表和.init段  程序头表是管着 将这个加载到内存中运行时  
需要将某几个节合并成一个段 就比如说linux内存映像中 包括elf头 程序头表 .init .text .rodata是只读段
.data 和.bss是读写段  
这里有个地方要注意 那就是 .bss是初始化为0和未初始化的全局变量 但是在磁盘中是不占存储空间的
.bss段的信息 包括有几个变量及大小是放在符号表中的 因此 从可执行文件加载到内存映像的时候 
只读段的磁盘大小与内存的大小相同 但读写段的磁盘大小是小于内存的大小的

这是程序头表的作用 
看一个栗子
ELF 头：
  Magic：   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  类别:                              ELF64
  数据:                              2 补码，小端序 (little endian)
  版本:                              1 (current)
  OS/ABI:                            UNIX - System V
  ABI 版本:                          0
  类型:                              DYN (共享目标文件)
  系统架构:                          Advanced Micro Devices X86-64
  版本:                              0x1
  入口点地址：               0xc70
  程序头起点：          64 (bytes into file)
  Start of section headers:          11696 (bytes into file)
  标志：             0x0
  本头的大小：       64 (字节)
  程序头大小：       56 (字节)
  Number of program headers:         9
  节头大小：         64 (字节)
  节头数量：         29
  字符串表索引节头： 28

这里加上了程序头大小 以及程序头的数量 我们看一下程序头的样子
Elf 文件类型为 DYN (共享目标文件)
Entry point 0xc70
There are 9 program headers, starting at offset 64

程序头：
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000001f8 0x00000000000001f8  R      0x8
  INTERP         0x0000000000000238 0x0000000000000238 0x0000000000000238
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x00000000000017c8 0x00000000000017c8  R E    0x200000
  LOAD           0x0000000000001d00 0x0000000000201d00 0x0000000000201d00
                 0x0000000000000310 0x0000000000000330  RW     0x200000
  DYNAMIC        0x0000000000001d10 0x0000000000201d10 0x0000000000201d10
                 0x00000000000001f0 0x00000000000001f0  RW     0x8
  NOTE           0x0000000000000254 0x0000000000000254 0x0000000000000254
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_EH_FRAME   0x0000000000001634 0x0000000000001634 0x0000000000001634
                 0x000000000000004c 0x000000000000004c  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x0000000000001d00 0x0000000000201d00 0x0000000000201d00
                 0x0000000000000300 0x0000000000000300  R      0x1

 Section to Segment mapping:
  段节...
   00
   01     .interp
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame
   03     .init_array .fini_array .dynamic .got .data .bss
   04     .dynamic
   05     .note.ABI-tag .note.gnu.build-id
   06     .eh_frame_hdr
   07
   08     .init_array .fini_array .dynamic .got

两个load段就是要加载到内存中的两个段 其中还包括了虚拟的地址 等 还有就是可读可写可执行等属性 
下面的mapping就是哪个段中是由哪几个程序头组成的

}

然后第二个步骤应该是
将所有的代码段 数据段合并在一起 然后计算每个符号在虚拟空间中的绝对地址 
最后将所有引用符号的地方替换成地址

重定位的信息在elf的rel.text节和rel.data节 这两个节



