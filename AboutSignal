关于Unix/Linux信号

在各个博客搜出来的东西 总结一下

首先关于信号 
分为可靠信号和不可靠信号 不可靠信号主要是无法排队 会丢失 而且每次处理信号以后 都会将信号的
关联行为设置为默认，有可能导致对信号的错误处理，所以用户需重新调用signal设置默认行为
否而Linux上解决了信号排队的问题 也就是主要为信号丢失的问题 信号的序号小于SIGRTMIN (32) 就是不可靠信号
再后来 人们直接定义了一批可靠信号 支持排队 不会丢失 信号的发送和安装出现了新的sigaction和sigqueue
目前linux中的signal方法是由sigaction实现的 但是不可靠的信号还是不可靠的 可靠性与信号序号有关

sigaction与signal的区别
    sigaction可以向信号传递信息 signal则不能

处理信号 忽略 捕捉 缺省操作

发送信号的方式 
    kill sigqueue raise abort alarm setitimer 

    kill(pid_t pid, int signo)
        pid > 0 进程id为pid的进程发送信号
        pid == 0 同一个进程组的进程
        pid < 0 进程组id为-pid的进程

    raise(int signo)
        向进程本身发送信号

    sigqueue(pid_t pid, int sig, const union sigval val);
        typedef unoin sigval 
        {
            int sigval_int;
            void *sigval_ptr;
        }sigval_t;

    alarm(unsigned int seconds);
        专门为SIGALRM信号设计的

    setitimer(int which, const struct itimeval *value, struct itimeval*ovalue);

安装信号有 
    void (*signal(int num, void(*handler)(int)))(int)
    第二个参数可以为SIG_IGN 忽略信号 也可以是SIG_DFL 还可以是函数地址

    int sigaction(int num, const struct sigaction *act, struct sigaction* oldact);
    若二三参数为空 那么可以用来检测信号的有效性

    struct sigaction 
    {
        //本机man手册中 并不是union 而是同时存在
        union 
        {
            sighandler_t sighandler;        //只能传递信号值
            void (*sa_sigaction)(int ,struct siginfo*, void *); //可传送信号值以及信息 第三参数未使用
        }_u;

        sigset_t sa_mask;
        unsigned long sa_flags;
        void (*sa_restorer)(void); //已过时
    };

    typedef struct siginfo_t 
    {
        int si_signo;
        int si_errno;
        int si_code;    //分别是 信号值 errno值 以及产生的原因 对所有信号都有意义

        union 
        {
            int pad[SI_PAD_SIZE];
            //对SIGKILL有意义的结构
            struct 
            {
                ...
            };

            //对SIGBUS SIGILL SIGFPE有意义的结构
            strcut 
            {
                ...
            };
        }
    } siginfo;

    对于实时信号 siginfo 应该是
    typedef struct 
    {
        int si_signo;
        int si_errno;
        int si_code;
        union sigval si_value;
    } siginfo_t;

    第四个联合体指针 是
    union sigval si_value
    {
        int sival_int;
        void *sival_ptr;
    };
据说是 设置了SA_SIGINFO标志以后 就会要求 传递信号的info 也就是要用sigaction的union中
的第二个函数指针 我就试了一下  然后查man手册 发现sigaction 第一个并不是union  而是两个函数
指针可以同时存在 并列的 然后就是设置SA_SIGINFO 标志 
我发现 不管有没有设置SA_SIGINFO 标志 只要sa_sigaction指针不为空就会调用那个方法 
但是设置SA_SIGINFO以后 不设置sa_sigaction 依然可以调用最一开始1参数的sighandler


然后是关于信号的生存周期 
信号先是由外部硬件 或 kill等方法生成  
然后是在进程中注册 PCB中的关于未决信号的成员
struct sigpending pending：
struct sigpending
{
    struct sigqueue *head, **tail;
    sigset_t signal;
};
sigpending的第一二个成员指向未决信号链的首尾 然后 第三个是当前的未决信号集 
每个sigqueue是这样的 来代表一个特定信号
strcut sigqueue
{
    strcut sigqueue* next;
    siginfo_t siginfo;
};

所谓的信号注册就是将信号加入到PCB的sigpending的未决信号集中 而且其信息被保存到未决信号链
的某个siginfo_t 中  实时信号之所以可靠就是因为 向进程重复发送一个信号以后会在未决信号链 
的末尾新添加一个成员来记录其信息 

注销信号的时候 进程在从内核空间退回到用户空间的时候 会检查是否有信号待处理 如果有未决信号且
未被进程阻塞 那么会先将其在未决信号链中的结构释放 而如果是不可靠信号 说明在sigqueue中只
占用一个位置 那么就将其释放 并将进程中的未决信号集中的该信号注销 对于可靠信号 如果在sigqueue
中数量超过一个 那么就只将未决信号链中的结构释放 否则连同未决信号集中的信号也注销

信号在进程中被注销以后  会立即执行信号处理函数 处理结束以后 信号对进程的影响至此结束
