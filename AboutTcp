TCP IP 协议栈

物理层
数据链路层
IP （网络层）
TCP/UDP 传输层
应用层（会话层）

交换机 实现IP层 数据链路层 物理层

connect函数 实现 

TCP三次握手 

l ---- SYN      ----> s
l <----SYN ACK  ----  s
l -----ACK      ----> s

函数调用

connect 如果在第二次握手的时候 s给l重发的包没有收到 那么此时会出现什么情况？
        从第一次握手的时候发
如果server端没有调用accept此时会出现什么情况 
关于server的半连接和全连接队列 具体时期会出现什么情况

tcpdump抓包

协议栈 TCP IP 端到端 socket

四次挥手 
TIME_WAIT
2MSL  
SO_REUSEADDR SO_REUSEPORT   //等TIMEWAIT时间过了以后才能重用如调试或服务器崩溃 时
                            //需要重用端口同过这两个可以快速重用端口号

TCP和UDP 
TCP 可靠 协议栈 
重发 顺序保证 
tcp通讯 必须有连接建立

IO复用 

select：
网络出错 select能否检测到异常 不可以 
select第四个参数是异常fd集合 但是不能用来判断网络有没有断开
网络断开时 只会返回fd可读 read会返回
select 常用用法 ：
    用select来实现异步connect
    
    socket阻塞时，用connect连接会阻塞
    但可以通过将socket设置为NONBLOCK
    然后用connect来连接判断返回值
    返回值是0的话 表明连接成功
    返回值是-1 看errno不是 EWOULDBLOCK 说明出错
    用select/poll设置一个超时时间看他是不是可写的 

EPOLL:
LT：水平触发 socket即监听的wait_queue_head上有信号就会一直通知 
ET：socket有事件改变才会触发

收数据有ET和LT
但是 写数据用ET和LT没有实际意义
发数据的模式： 有数据 直接send或write 
               发不出去的时候 返回值-1且错误码为EWOULDBLOCK或EAGAIN 时
               就注册可写事件 直到下一次可写的时候 这样会有一个问题 
               我们需要一个发送缓冲区 队列 每次插入队尾  发完以后要移除可写事件


socket设置成非阻塞 
Linux创建socket通过socket方法的type属性 
可以通过fcntl 
也可以通过accept4

shutdown 优雅关闭 
在A机器上登陆了账户 然后再B上登录 此时会把A挤下来 A会自动重连 B会被t下来 B也会自动重连
不可以直接关闭前一个连接  服务器要告诉A A要知道自己是被t下线的
A如果是作弊用户 不会自己关闭链接 服务器只能自己关闭连接 此时出现的问题
send会把数据放在网卡里面 但是此时数据可能不会被发出去 所以我们要做到的效果是 
确保A收到下线的数据包 并关闭链接

优雅关闭： 将数据发完以后再关闭
实现1： 利用API shutdown函数 不可以用close这种函数 shutdown可以关闭读和写 关闭一端 
或者关闭两端的数据
实现2： SOCK_LINGER选项 socket启用这个选项的话 数据没发出会等数据发送完以后才真
正关闭socket， 可以设置一个超时时间

SO_SENDTIMEOUT SO_RECVTIMEOUT 客户端文件下载 阻塞的socket 如果服务器端出现问题 
可以通过这两个选项设置超时时间

SO_KEEPALIVE 心跳包 长连接 需要保活 
长期无数据来往 需要发心跳包 来保活 这个选项可用来替代自己写的心跳包
但是 1 这个选项 设置以后会对所有socket产生影响
     2 默认的时间很长 可以通过别的选项来修改时间 但是这个选项会不管有没有数据来往 都会一直发
     3 选项很难用

{
    send：   socket是阻塞的：   发不出去会阻塞  
             socket是非阻塞的： 由于TCP发送的缓冲区太小发不出去 
                                错误码会是EWOULDBLOCK EAGAIN

    recv：   socket阻塞：       收不到东西会阻塞 
             socket非阻塞：     由于TCP接受的缓冲区太小
                                错误码同上


    所以 如果recv/send的返回值 小于0时 
        有可能1 是没有连接上 
              2 如果错误码是EWOULDBLOCK EAGAIN 说明TCP缓冲区太小
              3 错误码是EINTR 说明被信号打断 需要重试

        等于0 的话 
            表明对端关闭链接 四次挥手前两步

        大于0的话 
            实际发出或收到的字节数

    send返回值 为100 说明 应用层把数据放到了本地协议栈里面 

    socket的选项 TCP_NODELAY Nagle算法

    操作系统会默认把小的数据包放在一起 积攒起来玩个大的
    但如果有TCP_NODELAY 写到协议栈的数据会立刻发出 

}

可重入与不可重入 
被信号中断后 会返回-1 但是如果errno是EINTR 需要重新调用
错误码

EINTR  

SIGPIPE EPIPE 
linux服务器开发时 在main中屏蔽掉SIGPIPE信号
当一个链接已经关闭的时候 调用send或recv返回0 但是有可能会再次调用send或recv 此时会产生
SIGPIPE 或EPIPE 程序会崩溃

gethostbyname 将域名转化成ip地址 
默认阻塞 当这个函数出错的时候 不可以使用perror获取错误码 叫做herror

服务器编程中的定时器
常见的服务器会产生很多死链 
1 四次挥手 另一端崩溃 有可能会产生TIMEWAIT
2 端与端之间的链接问题 中间的路由器断掉 系统API检测不到 但心跳包是固定时间

或者是定时任务 都需要定时器 

tcp粘包问题
首先 tcp不存在丢包问题 
tcp是流式协议 
常见的解决粘包问题 的做法
1 每个数据包固定大小
2 数据包以特殊字符
3 在包头中字段指定包的大小 （最广泛）

断线重连怎么设计 
分两种 ：1  客户端和服务器 客户端发现自己断掉 重连
         2  一组服务中的下游服务
客户端可以 1  间隔时间 4s 8s 16s重连 或者 2s 4s 6s 8s等
           2  监听网络发生变化的话立即重连
           3  对话框 告诉用户

HTTP协议 应用层协议

